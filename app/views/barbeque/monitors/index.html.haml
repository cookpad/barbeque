- content_for(:title, 'Monitors - Barbeque')
- content_for(:header) do
  %ol.breadcrumb
    %li= link_to('Home', root_path)
    %li.active Monitors

.row
  .col-sm-12
    .box.box-primary
      .box-header
        %h3.box-title.with_padding Recently processed jobs (hourly)
      .box-body
        #recently-processed-jobs-chart{data: { jobs: @recently_processed_jobs.to_json }}
        %table.table
          %thead
            %tr
              %th Hour
              %th Application
              %th Job
              %th Count
          %tbody
            - @recently_processed_jobs.keys.sort { |x, y| y <=> x }.each do |date_hour|
              - jobs = @recently_processed_jobs[date_hour]
              - jobs.keys.sort.each do |job_id|
                - job = jobs[job_id]
                %tr
                  %td= date_hour
                  %td= link_to(job[:app_name], app_path(job[:app_id]))
                  %td= link_to(job[:job_name], job_definition_path(job[:job_id]))
                  %td= job[:count]

:javascript
  const chartDiv = document.getElementById('recently-processed-jobs-chart');
  const recentlyProcesedJobs = JSON.parse(chartDiv.dataset.jobs);

  const countsPerJob = {};
  for (const [dateHour, jobs] of Object.entries(recentlyProcesedJobs)) {
    for (const job of Object.values(jobs)) {
      const name = job.app_name + ' - ' + job.job_name;
      if (!countsPerJob[name]) { countsPerJob[name] = []; }
      if (!countsPerJob[name][dateHour]) { countsPerJob[name][dateHour] = job.count; }
    }
  }

  const plotlyArgs = [];
  for (const [name, series] of Object.entries(countsPerJob)) {
    const x = [];
    const y = [];
    for (const [dateHour, count] of Object.entries(series)) {
      x.push(dateHour);
      y.push(count);
    }
    plotlyArgs.push({
      type: 'scatter',
      name,
      x,
      y,
      hoverlabel: {
        namelength: -1,
      }
    });
  }
  Plotly.plot(chartDiv, plotlyArgs);
